def dist(x1,y1,x2,y2):
    return ((x2-x1)**2 + (y2-y1)**2)**0.5

def dijkstra(graph,src,dest,visited=[],distances={},predecessors={}):
    """ calculates a shortest path tree routed in src
    """    
    # a few sanity checks
    if src not in graph:
        raise TypeError('the root of the shortest path tree cannot be found in the graph')
    if dest not in graph:
        raise TypeError('the target of the shortest path cannot be found in the graph')    
    # ending condition
    if src == dest:
        # We build the shortest path and display it
        path=[]
        pred=dest
        while pred != None:
            path.append(pred)
            pred=predecessors.get(pred,None)
        path.reverse()
        print('shortest path: '+ str(path) +" cost="+str(distances[dest])) 
    else :     
        # if it is the initial  run, initializes the cost
        if not visited: 
            distances[src]=0
        # visit the neighbors
        for neighbor in graph[src] :
            if neighbor not in visited:
                new_distance = distances[src] + graph[src][neighbor]
                if new_distance < distances.get(neighbor,float('inf')):
                    distances[neighbor] = new_distance
                    predecessors[neighbor] = src
        # mark as visited
        visited.append(src)
        # now that all neighbors have been visited: recurse                         
        # select the non visited node with lowest distance 'x'
        # run Dijskstra with src='x'
        unvisited={}
        for k in graph:
            if k not in visited:
                unvisited[k] = distances.get(k,float('inf'))        
        x=min(unvisited, key=unvisited.get)
        dijkstra(graph,x,dest,visited,distances,predecessors)
        
        
def build_graph() :
    
    with open('usa.txt') as file_in :
        linecount = 1
        nodecount = 0  
        
        #target = open("testdata.txt",'w')
        
        for line in file_in : 
            x = line.split()
            #print "hi"
            if linecount == 1 or linecount == 87577 or linecount == 209539 : 
                linecount = linecount + 1
                continue
            
            elif linecount <= 87576 and linecount >= 2 : 
                linecount = linecount + 1
                nodeName = x[0] 
                node.update( { nodeName : (int(x[1]) , int(x[2]))} )
                #print nodeName , node[nodeName]
                
            elif linecount >= 87578 and linecount < 209538 : 
                linecount = linecount + 1 
                node1 = x[0]
                node2 = x[1]
                
                cost = dist(node[node1][0],node[node1][1],node[node2][0],node[node2][1])
                
                #if linecount == 87579 :
                #    print node[node1][0] , node[node1][1]
                #   print node[node2][0] , node[node2][1]
                #    print cost
                              
                map.setdefault(node1,[]).append(node2 : cost)
                map.setdefault(node2,[]).append(node1 : cost)
                
                #print node1 , map[node1] 
                #print node2 , map[node2]
            
            elif linecount == 209538 :
                src = x[0] 
                sink = x[1]
        
          
        print map
         #target.close()    
            
graph = {'s': {'a': 2, 'b': 1},
            'a': {'s': 3, 'b': 4, 'c':8},
            'b': {'s': 4, 'a': 2, 'd': 2},
            'c': {'a': 2, 'd': 7, 't': 4},
            'd': {'b': 1, 'c': 11, 't': 5},
            't': {'c': 3, 'd': 5}}
    
word = raw_input("Please input the arguments for the program, ex: D 0 5 -->")
words = word.split()
srcNode = int(words[1])
dstNode = int(words[2])
        
if words[0] == 'D' :
    print "Dij ! , source node: %d , destination node: %d "  %(srcNode,dstNode)
elif words[0] == 'B' :
    print "Bell ! , source node: %d , destination node: %d "  %(srcNode,dstNode)    

map = dict()
node= dict()

build_graph() 

#node.update({'1': 2})
    
#print node 
#print map 

 #dijkstra(graph,'s','t')